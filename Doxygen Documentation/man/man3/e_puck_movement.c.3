.TH "C:/Users/Stefan/Documents/GitHub/Final_Project/lib/e_puck_movement.c" 3 "Mon Mar 31 2014" "Version 0.2" "Major Project Documentation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Stefan/Documents/GitHub/Final_Project/lib/e_puck_movement.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <webots/robot\&.h>\fP
.br
\fC#include <webots/differential_wheels\&.h>\fP
.br
\fC#include <webots/distance_sensor\&.h>\fP
.br
\fC#include <webots/light_sensor\&.h>\fP
.br
\fC#include <webots/camera\&.h>\fP
.br
\fC#include <webots/accelerometer\&.h>\fP
.br
\fC#include <webots/led\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include 'e_puck_movement\&.h'\fP
.br
\fC#include 'map_building\&.h'\fP
.br
\fC#include 'odometry\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBM_PI\fP   3\&.1415926535897932384626433832795L"
.br
.ti -1c
.RI "#define \fBTIME_STEP\fP   8"
.br
.ti -1c
.RI "#define \fBWHEEL_RADIUS\fP   0\&.0206625"
.br
.ti -1c
.RI "#define \fBWHEELBASE\fP   0\&.052"
.br
.ti -1c
.RI "#define \fBENCODER_RESOLUTION\fP   159\&.23"
.br
.ti -1c
.RI "#define \fBINCREMENT_STEP\fP   1000"
.br
.ti -1c
.RI "#define \fBSTEP_TOLERANCE\fP   6\&.0"
.br
.ti -1c
.RI "#define \fBRANGE\fP   (1024 / 2)"
.br
.ti -1c
.RI "#define \fBMIN_DIST\fP   20\&.0f"
.br
.ti -1c
.RI "#define \fBMIN_SPEED\fP   10\&.0f"
.br
.ti -1c
.RI "#define \fBNUMTOURNAMENTS\fP   1"
.br
.ti -1c
.RI "#define \fBRTOD\fP(r)   ((r) * 180 / \fBM_PI\fP)"
.br
.ti -1c
.RI "#define \fBANGLE_TOLERANCE\fP   5"
.br
.ti -1c
.RI "#define \fBEAST\fP   0"
.br
.ti -1c
.RI "#define \fBNORTH\fP   90"
.br
.ti -1c
.RI "#define \fBWEST\fP   180"
.br
.ti -1c
.RI "#define \fBSOUTH\fP   270"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBstop_robot\fP ()"
.br
.ti -1c
.RI "void \fBmove_forward\fP (double dSpeed, double dDist)"
.br
.ti -1c
.RI "void \fBturn_left\fP (double dSpeed)"
.br
.ti -1c
.RI "void \fBturn_right\fP (double dSpeed)"
.br
.ti -1c
.RI "void \fBturn_angle\fP (double dAngle, double dSpeed)"
.br
.ti -1c
.RI "void \fBset_motor_speed\fP (double dSpeedL, double dSpeedR)"
.br
.ti -1c
.RI "double * \fBget_encoder_positions\fP ()"
.br
.ti -1c
.RI "void \fBcheck_rotation\fP (double cur_rot, double want_rot, double dSpeed)"
.br
.ti -1c
.RI "double * \fBcompute_odometry_data\fP ()"
.br
.ti -1c
.RI "void \fBUMBmark\fP (double dSpeed, double dDistance)"
.br
.ti -1c
.RI "void \fBmeasure_clockWise\fP (double dSpeed, double dDistance)"
.br
.ti -1c
.RI "void \fBmeasure_CounterClockWise\fP (double dSpeed, double dDistance)"
.br
.ti -1c
.RI "void \fBset_leds\fP (int iActive)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "double \fBdCurSpeed\fP [2] = {0\&.0f, 0\&.0f}"
.br
.ti -1c
.RI "double \fBdPrevEncPos\fP [2] = {0\&.0f, 0\&.0f}"
.br
.ti -1c
.RI "double * \fBpoint_dOdometryData\fP"
.br
.ti -1c
.RI "WbDeviceTag \fBled\fP [3]"
.br
.ti -1c
.RI "float \fBweights_left\fP [8] = {-1,-1,-1,0\&.5,-0\&.5,0\&.5,1,2}"
.br
.ti -1c
.RI "float \fBweights_right\fP [8] = {1,0\&.8,1,-0\&.5,0\&.5,-1,-1\&.6,-2}"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ANGLE_TOLERANCE   5"

.SS "#define EAST   0"

.SS "#define ENCODER_RESOLUTION   159\&.23"

.SS "#define INCREMENT_STEP   1000"

.SS "#define M_PI   3\&.1415926535897932384626433832795L"

.SS "#define MIN_DIST   20\&.0f"

.SS "#define MIN_SPEED   10\&.0f"

.SS "#define NORTH   90"

.SS "#define NUMTOURNAMENTS   1"

.SS "#define RANGE   (1024 / 2)"

.SS "#define RTOD(r)   ((r) * 180 / \fBM_PI\fP)"

.SS "#define SOUTH   270"

.SS "#define STEP_TOLERANCE   6\&.0"

.SS "#define TIME_STEP   8"

.SS "#define WEST   180"

.SS "#define WHEEL_RADIUS   0\&.0206625"

.SS "#define WHEELBASE   0\&.052"

.SH "Function Documentation"
.PP 
.SS "void check_rotation (doublecur_rot, doublewant_rot, doubledSpeed)"
FUnction to compare the current heading to the wanted heading and fix the heading should it surpass a threshold 
.SS "double * compute_odometry_data ()"
Function to compute the robots current odometry data this includes the x and y placement as well as the rotation theta 
.SS "double * get_encoder_positions ()"
Function to get and return the current encoder position of the wheels 
.SS "void measure_clockWise (doubledSpeed, doubledDistance)"
Function to measure the movement accuracy by driving a clockwise square\&. This is part of the UMBmark algorithm 
.SS "void measure_CounterClockWise (doubledSpeed, doubledDistance)"
Function to measure the movement accuracy by driving a counter-clockwise square\&. This is part of the UMBmark algorithm 
.SS "void move_forward (doubledSped, doubledDis)"
Function to move the robot forward a given distance at a given speed 
.SS "void set_leds (intiActive)"
set the status of the LEDs 
.SS "void set_motor_speed (doubledLeftSpeed, doubledRightSpeed)"
Function to set the motor speed of the robot 
.SS "void stop_robot ()"
Function to stop the robot 
.SS "void turn_angle (doubledAngle, doubledSpeed)"
Function to turn the robot a given angle with a given speed 
.SS "void turn_left (doubledSpeed)"
Function to turn left 
.SS "void turn_right (doubledSpeed)"
Function to turn right 
.SS "void UMBmark (doubledSpeed, doubledDistance)"
University of Michigan Benchmark 
.SH "Variable Documentation"
.PP 
.SS "double dCurSpeed[2] = {0\&.0f, 0\&.0f}"

.SS "double dPrevEncPos[2] = {0\&.0f, 0\&.0f}"

.SS "WbDeviceTag led[3]"

.SS "double* point_dOdometryData"

.SS "float weights_left[8] = {-1,-1,-1,0\&.5,-0\&.5,0\&.5,1,2}"

.SS "float weights_right[8] = {1,0\&.8,1,-0\&.5,0\&.5,-1,-1\&.6,-2}"

.SH "Author"
.PP 
Generated automatically by Doxygen for Major Project Documentation from the source code\&.
